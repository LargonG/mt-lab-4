    // apply<rule-name>(<args>): Node<<rule-name>Result>
    fun apply%s(%s): Node<%sResult> {
        val context = lexer.lookToken() ?: throw IllegalStateException()
        val root = Node("%s", %sResult(), mutableListOf())
        val result = root.data
        when (context.token) {
            /*
                for it in first:
                    <first>(it)

                if (first.contains(EMPTY)) {
                     for it in follow:
                         <follow>(it)
                 }
             */

%s

            else -> throw IllegalStateException("No excepted: ${context.token}")
        }

        return root
    }

